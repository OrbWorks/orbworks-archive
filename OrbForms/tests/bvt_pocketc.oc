// PocketC compatibility test
#include "tests.h"

vint() {
    return 4;
}

vstring() {
    return "6";
}

vstringempty() {
    return "";
}

vstring0() {
    return "0";
}

vfloat() {
    return 1.5;
}

vchar() {
    return 'A';
}

vvoid() {
    return;
    5;
}
#define RUNTESTS
#if RUNTESTS
binary() {
    int i = 4;
    float f = 1.5;
    char c = '0';
    string s = "10";
    
    section("operators");
    section("arithmetic");
    // addition
    // static and variant
    test(i + vint() == 8, "i+vi");
    test(i + vstring() == "46", "i+vs");
    test(i + vfloat() == 5.5, "i+vf");
    test(i + vchar() == 69, "i+vc");
    test(vint() + i == 8, "vi+i");
    test(vstring() + i == "64", "vs+i");
    test(vfloat() + i == 5.5, "vf+i");
    test(vchar() + i == 69, "vc+i");

    test(i - vint() == 0, "i-vi");
    //test(i - vstring() == "46", "i-vs");
    test(i - vfloat() == 2.5, "i-vf");
    test(i - vchar() == -61, "i-vc");
    test(vint() - i == 0, "vi-i");
    //test(vstring() - i == "64", "vs-i");
    test(vfloat() - i == -2.5, "vf-i");
    test(vchar() - i == 61, "vc-i");

    test(i * vint() == 16, "i*vi");
    //test(i * vstring() == "46", "i*vs");
    test(i * vfloat() == 6, "i*vf");
    test(i * vchar() == 260, "i*vc");
    test(vint() * i == 16, "vi*i");
    //test(vstring() * i == "64", "vs*i");
    test(vfloat() * i == 6, "vf*i");
    test(vchar() * i == 260, "vc*i");

    test(i / vint() == 1, "i/vi");
    //test(i / vstring() == "46", "i/vs");
    test(i / vfloat() > 2.6 && i / vfloat() < 2.7, "i/vf");
    test(i / vchar() == 0, "i/vc");
    test(vint() / i == 1, "vi/i");
    //test(vstring() / i == "64", "vs/i");
    test(vfloat() / i > 0.374 && vfloat() / i < 0.376, "vf/i");
    test(vchar() / i == 16, "vc/i");
    
    // bitwise
    section("bitwise");
    i = 8;
    test((i | vint()) == 12, "i|vi");
    test((i & vint()) == 0, "i&vi");
    test((i ^ vint()) == 12, "i^vi");

    // variant OP variant	
    test(vint() + vfloat() == 5.5, "vi+vf");
    test(vint() - vfloat() == 2.5, "vi-vf");
    test(vint() * vfloat() == 6, "vi*vf");
    
    // relational
    section("relational");
    test((vstring() == "6") == true, "vs==s");
    test(("6" == vstring()) == true, "s==vs");
    test((vstring() != "6") == false, "vs!=s");
    test(("6" != vstring()) == false, "s!=vs");
    test((vstring() == 6) == true, "vs==i");
    test((vstring() != 6) == false, "vs!=i");
    test(vfloat() > 1, "vf>i");
    test(vstring() < 7, "vs<i");
    test(vchar() >= "A", "vc>s");
    test(vstring() <= "8", "vs<s");
    
    // shift
    section("shift");
    test(vstring() >> 1 == 3, "vs>>i");
    test(vint() << 1 == 8, "vi<<i");
    test(vstring() << vint() == 96, "vs<<vi");
}

unary() {
    section("unary");
    test(!vstring() == false, "!vs");
    test(!vstring0() == false, "!vs0");
    test(!vstringempty() == true, "!vse");
    test(!vint() == false, "!vi");

    //test(-vstring() == -6, "-vs");
    test(-vint() == -4, "-vi");
    test(-vfloat() == -1.5, "-vf");
    test(-vchar() == -65, "-vc");
    
    test(~vint() == ~4, "~vi");
    test(~vchar() == ~65, "~vc");
}

struct Point { int x; int y; };
other() {
    int array[7] = {0,1,2,3,456,567,678 };
    Point pts[7];
    int* pa = &array[0];
    Point* pp = &pts[0];
    bool pass;

    section("other");
    test(array[vint()] == 456, "array[vi]");
    test(array[vstring()] == 678, "array[vs]");
    test((int)vint() > &array[0], "vi>&"); // cast required
    test(*(pa + vint()) == 456, "&+vi");
    pts[4].x = 7;
    test((*(pp + vint())).x == 7, "&+vi (struct)");

    pass = false;
    if (vstring()) {
        pass = true;
    }
    test(pass, "if (vs)");
    pass = true;
    if (vstringempty()) {
        pass = false;
    }
    test(pass, "if (vse)");
    pass = false;
    if (vstring0()) {
        pass = true;
    }
    test(pass, "if (vs0)");
}

ptr() {
    pointer p, p2;
    int i = 4;
    float f = 1.5;
    char c = 'A';
    string s = "6";
    
    section("pointer");	
    p = &i;
    test(*p == 4, "&i");
    *p++;
    test(*p == 1.5, "p++, &f");
    test(*++p == 'A', "++p, &c");
    test(*++p == '6', "++p, &s");
    *p += 2;
    test(*p == "62", "*p+=i");
    *p = 7;
    *p += 2;
    test(*p == "72", "*p=,+=");
    p = &f;
    *p *= vint();
    test(*p == 6, "*p*=vi");
    
    p = &i;
    test((*p)++ == 4, "(*p)++");
    test(*p == 5, "(*p)++2");
    test(i == 5, "(*p)++3");

    p = &c;
    test(++(*p) == 'B', "++(*p)");
    test(c == 'B', "++(*p)2");

    p = &i;
    test((*p)-- == 5, "(*p)--");
    test(*p == 4, "(*p)--2");
    test(i == 4, "(*p)--3");

    p = &c;
    test(--(*p) == 'A', "--(*p)");
    test(c == 'A', "--(*p)2");
    
    p = &f;
    test((*p)-- == 6, "(*p)f--");
    putsl(f);
    test(*p == 5, "(*p)f--2");
    test(f == 5, "(*p)f--3");

    p = &s;
    s = "5";
    p2 = &i;
    *p = *p2 = 7;
    test(*p == 7, "*p=*p2=i");
    test(*p2 == 7, "*p=*p2=i2");
    *p += 3;
    test(s == "73", "*p=*p2=i3"); //still a string
    test((*p)@[0] == "7", "(*p)@[0]");
}

optimizer() {
    section("optimizer");
    test(vstring() + 0 == "60", "vs+0");
}

int i_is(int i, string s) {
    return i + s;
}

func() {
    pointer p;
    p = vint;
    test((*p)() == 4, "vi()");
    p = i_is;
    test((*p)(4, "7") == 47, "i(is)");
    //putsl(p("5", 4));
}

invalid() {
    pointer p;
    string s = "6", s2;
    float f;
    
    p = &f;
    putsl(*p | 7);
}
#endif

main() {
    binary();
    unary();
    other();
    ptr();
    optimizer();
    func();
    //invalid();
    final();
}

string mysubstr(string str, int start, int len) {
  string res;
  while (len--)
    res += str[start++];
  return res;
}

enum { TOK_END, TOK_NUM, TOK_OP };
struct Expr {
  float eval(string expr, int* piError);
  
  // expression state
  string es;
  int ies;
  
  // current token
  char op;
  float num;
  int tok;
  
  // internal methods
  void nextToken();
  float doExpr();
  float doAdd();
  float doMult();
  float doPrimary();
};

void Expr.nextToken() {
  char c;
  int istart;
  while (es[ies] == ' ') ies++;
  c = es[ies];
  if (c == '\0') {
    tok = TOK_END;
    return;
  }
  istart = ies;
  if (c >= '0' && c <= '9') {
    while (c >= '0' && c <= '9' || c == '.') {
      c = es[++ies];
    }
    num = (float)mysubstr(es, istart, ies - istart);
    tok = TOK_NUM;
    return;
  }
  op = es[ies++];
  tok = TOK_OP;
}

float Expr.doPrimary() {
  float res;
  if (tok == TOK_NUM) {
    res = num;
    nextToken();
  }
  else if (tok == TOK_OP && op == '(') {
    nextToken();
    res = doExpr();
    if (op == ')')
      nextToken();
  }
  return res;
}

float Expr.doMult() {
  float val, right;
  char lastOp;
  val = doPrimary();
  while (tok == TOK_OP && (op == '*' || op == '/')) {
    lastOp = op;
    nextToken();
    right = doPrimary();
    if (lastOp == '*')
      val *= right;
    else
      val /= right;
  }
  return val;
}

float Expr.doAdd() {
  float val, right;
  char lastOp;
  val = doMult();
  while (tok == TOK_OP && (op == '+' || op == '-')) {
    lastOp = op;
    nextToken();
    right = doMult();
    if (lastOp == '+')
      val += right;
    else
      val -= right;
  }
  return val;
}

float Expr.doExpr() {
  float res;
  res = doAdd();
  return res;
}

float Expr.eval(string expr, int* piError) {
  float res;
  *piError = 0;
  es = expr;
  ies = 0;
  nextToken();
  res = doExpr();
  if (tok != TOK_END)
    *piError = ies;
  return res;
}

void testExpr(string expr, float expected) {
  Expr e;
  int iError;
  float res;
  
  res = e.eval(expr, &iError);
  puts(expr + " = " + res);
  if (iError)
    puts("  -- Error: " + iError);
  else if (res > expected + 0.0001 || res < expected - 0.0001)
    puts("  -- Wrong: expected " + expected);
  puts("\n");
}

void unitTest() {
  testExpr("1 + 2 + 3 + 4 + 5 + 6", 21);
  testExpr("1 + 2", 3);
  testExpr("1 + 2.3 * 3", 7.9);
  testExpr("8 * (7 + 3)", 80);
  testExpr("(2)", 2);
  testExpr("(2 + 1)", 3);
  testExpr("(2 + 1) + (3 + 4)", 10);
  testExpr("1 + 2)", 3);
  testExpr("()", 0);
  testExpr("-7", -7);
  testExpr("+9", 9);
  testExpr("1 + -7", -6);
  testExpr("1 2 + 7", 1);
  testExpr("@1 2 + 7", 1);
}

void main() {
  unitTest();
}
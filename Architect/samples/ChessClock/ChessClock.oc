// application code

enum { ADD_BEFORE, ADD_AFTER, ADD_DELAY };
struct GameOptions {
    string name;
    int minWhite, minBlack;
    int secAdd;
    int addType;
    int moves;
};

GameOptions options;

const int c_numDefault = 3;
const int c_numSaved = 15;
GameOptions optionsDefault[c_numDefault] = {
    { "Lightning", 2, 2, 2, ADD_BEFORE, 500 },
    { "Blitz", 5, 5, 0, ADD_AFTER, 500 },
    { "Normal", 20, 20, 0, ADD_AFTER, 500 }
};

struct Game {
    int timeWhite;
    int timeBlack;
    bool bWhite;
    int delay;
};

Game game;
bool bPaused;

// The saved state of your application is represented
// by the members of this structure
struct AppPrefs {
    GameOptions options[c_numSaved];
    GameOptions currOptions;
    Game game;
    bool bTurnSound;
    bool bEndSound;
    bool bPlaying;
};

AppPrefs appPrefs;

handler app.onstart() {
    int i;
    Preferences prefs;

    // set up the default options in case the preferences
    // do not exist (or only partially exist in the case of
    // installing v1.1 over v1.0)
    for (i=0;i<c_numDefault;i++) {
        appPrefs.options[i] = optionsDefault[i];
    }
    appPrefs.currOptions = optionsDefault[0];
    appPrefs.bTurnSound = true;
    appPrefs.bEndSound = true;

    // load the preferences
    prefs.get("ChCk", false, &appPrefs, typeof(appPrefs), 1);
    options = appPrefs.currOptions;
    game = appPrefs.game;
    
    // if we are running in B/W, try changing to grey
    if (getdepth() == 1) {
        if (!setdepth(4)) {
            setdepth(2);
        }
    }

    // load the initial form
    if (appPrefs.bPlaying) {
        bPaused = true;
        mainForm.load();
        gameForm.domodal();
    } else {
        mainForm.load();
    }
}

handler app.onstop() {
    Preferences prefs;
    appPrefs.currOptions = options;
    appPrefs.game = game;
    
    // save the preferences
    prefs.set("ChCk", false, &appPrefs, typeof(appPrefs), 1);
}

void saveOptions() {
    int i, empty = -1;
    bool found;
    for (i=0;i<c_numSaved;i++) {
        if (options.name == appPrefs.options[i].name) {
            found = true;
            break;
        }
        if (empty == -1 && !appPrefs.options[i].name) {
            empty = i;
        }
    }
    if (!found && empty == -1) {
        alert("Too many saved games. Only " + c_numSaved +
            " are supported.");
        return;
    }
    if (!found) i = empty;
    appPrefs.options[i] = options;
}

void deleteOptions() {
    int i;
    for (i=0;i<c_numSaved;i++) {
        if (options.name == appPrefs.options[i].name) {
            appPrefs.options[i].name = "";
            break;
        }
    }
    options.name = "";
    // try to load another option set
    for (i=0;i<c_numSaved;i++) {
        if (appPrefs.options[i].name) {
            options = appPrefs.options[i];
            break;
        }
    }
}
